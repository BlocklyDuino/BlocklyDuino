// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.hu');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Megjegyzés hozzáadása";
Blockly.Msg.AUTH = "Kérjük, engedélyezd az alkalmazásnak munkád elmentését és megosztását.";
Blockly.Msg.CHANGE_VALUE_TITLE = "Érték módosítása:";
Blockly.Msg.CHAT = "Ebben a mezőben tudsz a közreműködőkkel beszélgetni!";
Blockly.Msg.COLLAPSE_ALL = "Blokkok összecsukása";
Blockly.Msg.COLLAPSE_BLOCK = "Blokk összecsukása";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "szín 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "szín 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "arány";
Blockly.Msg.COLOUR_BLEND_TITLE = "színkeverés";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Két színt kever össze a megadott arányban (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://hu.wikipedia.org/wiki/Szín";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Válassz színt a palettáról.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "véletlen szín";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Véletlenszerűen kiválasztott szín.";
Blockly.Msg.COLOUR_RGB_BLUE = "kék";
Blockly.Msg.COLOUR_RGB_GREEN = "zöld";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "piros";
Blockly.Msg.COLOUR_RGB_TITLE = "Szín";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Szín előállítása a megadott vörös, zöld, és kék értékekkel.  Minden értéknek 0 és 100 közé kell esnie.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "befejezi az ismétlést";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "folytatja a következővel";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Megszakítja végtelen ciklust.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Megszakítja az aktuális futást és folytatja elölről.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Figyelem: Ez a blokk, csak egy ciklusban használható.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "Minden %1 elemre a %2 listában";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "A lista elemszámának megfelelő lépésszámú ciklus.  A \"%1\" változó minden lépésben megkapja a lista adott elemének értékét.  Minden lépésben végrehajtódnak az utasítások.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO = "from %1 to %2";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_FROM_TO_BY = "from %1 to %2 by %3";  // untranslated
Blockly.Msg.CONTROLS_FOR_INPUT_WITH = "count with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "Számold ki %1 értékét %2 és %3 között, lépésköz: %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Véges lépésszámú ciklus.  A \"%1\" változó értékét számolja ki a kezdőérték és a végérték között.  Minden lépésben végrehajtódnak az utasítások.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Újabb feltételes elágazás.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Végső, 'egyébként' feltételt ad a 'ha' blokkhoz.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "A feltételes elágazás (ha) blokk testreszabásához bővítsd, töröld vagy rendezd át a részeit.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "különben";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "ha";
Blockly.Msg.CONTROLS_IF_MSG_IF = "Ha";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Ha a kifejezés igaz, akkor végrehajtjuk az utasításokat.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Ha a kifejezés igaz, akkor végrehajtjuk az első utasítás blokkot.  Különben a második utasítás blokk kerül végrehajtásra.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Ha az első kifejezés igaz, akkor végrehajtjuk az első utasítás blokkot.  Ha a második kifejezés igaz, akkor végrehajtjuk a második utasítás blokkot.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Ha az első kifejezés igaz, akkor végrehajtjuk az első utasítás blokkot.  Ha a második kifejezés igaz, akkor végrehajtjuk a második utasítás blokkot.  Amennyiben egyik kifejezés sem igaz, akkor az utolsó utasítás blokk kerül végrehajtásra.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://hu.wikipedia.org/wiki/Ciklus_(programoz%C3%A1s)#Sz.C3.A1ml.C3.A1l.C3.B3s_.28FOR.29_ciklus";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "Ismételd %1 alkalommal";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Megadott kódrészlet ismételt végrehajtása.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "Ismételd amíg nem";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "ismételd amíg";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Amíg a feltétel hamis, végrehajtja az utasításokat.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Amíg a feltétel igaz, végrehajtja az utasításokat.";
Blockly.Msg.DELETE_BLOCK = "Blokk törlése";
Blockly.Msg.DELETE_X_BLOCKS = "%1 blokk törlése";
Blockly.Msg.DISABLE_BLOCK = "Blokk letiltása";
Blockly.Msg.DUPLICATE_BLOCK = "Másolat";
Blockly.Msg.ENABLE_BLOCK = "Blokk engedélyezése";
Blockly.Msg.EXPAND_ALL = "Blokkok kibontása";
Blockly.Msg.EXPAND_BLOCK = "Blokk kibontása";
Blockly.Msg.EXTERNAL_INPUTS = "Külső kapcsolatok";
Blockly.Msg.HELP = "Súgó";
Blockly.Msg.INLINE_INPUTS = "Belső kapcsolatok";
Blockly.Msg.INOUT_ANALOGPIN_TEXT = "Analog Pin";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_APPENDTEXT = "AnalogRead PIN#";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_HELPURL = "http://arduino.cc/en/Reference/AnalogRead";  // untranslated
Blockly.Msg.INOUT_ANALOG_READ_TOOLTIP = "Return value between 0 and 1024.";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_PIN = "AnalogWrite PIN#";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_VALUE = "value";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_HELPURL = "http://arduino.cc/en/Reference/AnalogWrite";  // untranslated
Blockly.Msg.INOUT_ANALOG_WRITE_TOOLTIP = "Write analog value between 0 and 255 to a specific Port.";  // untranslated
Blockly.Msg.INOUT_DIGITALPIN_TEXT = "Digital Pin";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PIN = "DigitalRead PIN#";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PULLUP = "pullup";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_HELPURL = "http://arduino.cc/en/Reference/DigitalRead";  // untranslated
Blockly.Msg.INOUT_DIGITAL_READ_TOOLTIP = "";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_PIN = "DigitalWrite PIN#";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_STAT = "Stat";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_HELPURL = "http://arduino.cc/en/Reference/DigitalWrite";  // untranslated
Blockly.Msg.INOUT_DIGITAL_WRITE_TOOLTIP = "Write digital value to a specific Port.";  // untranslated
Blockly.Msg.INOUT_HIGH = "HIGH";  // untranslated
Blockly.Msg.INOUT_LOW = "LOW";  // untranslated
Blockly.Msg.INOUT_OFF = "OFF";  // untranslated
Blockly.Msg.INOUT_ON = "ON";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_PIN = "Pulsein Pin#";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TIMEOUT = "Timeout";  // untranslated
Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TYPE = "Type";  // untranslated
Blockly.Msg.INOUT_PULSEIN_HELPURL = "http://arduino.cc/en/Reference/pulseIn";  // untranslated
Blockly.Msg.INOUT_PULSEIN_TOOLTIP = "Reads a pulse (either HIGH or LOW) on a pin.";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_DURATION = "duration";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_FREQ = "frequency";  // untranslated
Blockly.Msg.INOUT_TONE_APPENDTEXT_PIN = "tone Pin#";  // untranslated
Blockly.Msg.INOUT_TONE_HELPURL = "http://arduino.cc/en/reference/tone";  // untranslated
Blockly.Msg.INOUT_TONE_TOOLTIP = "The pin can be connected to a piezo buzzer or other speaker to play tones.";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "üres lista";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Elemeket nem tartalmazó üres listát ad eredményül";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "Lista készítés, elemek:";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Elem hozzáadása listához.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Listát készít a megadott elemekből.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "az első";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "a végétől számított";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "az elejétől számított";
Blockly.Msg.LISTS_GET_INDEX_GET = "listából értéke";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "listából kivétele";
Blockly.Msg.LISTS_GET_INDEX_LAST = "az utolsó";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "bármely";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "listából törlése";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "elemnek";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "A lista első elemét adja eredményül.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_END = "A lista megadott sorszámú elemét adja eredményül.  1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM_START = "A lista megadott sorszámú elemét adja eredményül.  1 az első elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "A lista utolsó elemét adja eredményül.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "A lista véletlenszerűen választott elemét adja eredményül.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Az első elem kivétele a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_END = "A megadott sorszámú elem kivétele a listából 1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM_START = "A megadott sorszámú elem kivétele a listából 1 az első elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Az utolsó elem kivétele a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Véletlenszerűen választott elem kivétele a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Az első elem törlése a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_END = "A megadott sorszámú elem törlése a listából 1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM_START = "A megadott sorszámú elem törlése a listából 1 az első elemet jelenti.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Az utolsó elem törlése a listából.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Véletlenszerűen választott elem törlése a listából.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "és a végétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "és az elejétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "és az utolsó";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "részlistája az első";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "részlistája a végétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "részlistája az elejétől számított";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "elem között";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "A lista adott részéről másolat.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "listában első előfordulásaː";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "listában utolsó előfordulásaː";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "A megadtott elem eslő vagy utolsó előfordulásával tér vissza.  0 esetén nincs ilyen eleme a listának.";
Blockly.Msg.LISTS_INLIST = "A(z)";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 üres lista?";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Az eredmény igaz, ha a lista nem tartalmaz elemeket.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "%1 lista hossza";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "A lista elemszámát adja eredményül.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "Lista készítése %1 elemet %2 alkalommal hozzáadva";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "A megadtott elem felhasználásával n elemű listát készít";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "elemkéntː";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "listába szúrd be";
Blockly.Msg.LISTS_SET_INDEX_SET = "listába állítsd be";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Beszúrás a lista elejére.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_END = "Beszúrás a megadott sorszámú elem elé a listában.  1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM_START = "Beszúrás a megadott sorszámú elem elé a listában.  1 az első elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Beszúrás a lista végére.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Beszúrás véletlenszerűen választott elem elé a listában.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Az első elem cseréje a listában.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_END = "A megadott sorszámú elem cseréje a listában.  1 az utolsó elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM_START = "A megadott sorszámú elem cseréje a listában.  1 az első elemet jelenti.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Az utolsó elem cseréje a listában.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Véletlenszerűen választott elem cseréje a listában.";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "lista készítése szövegből";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "sztring készítése listából";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "A lista elemeit összefűzi szöveggé a határoló karaktereket is felhasználva.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Listát készít a határoló karaktereknél törve a szöveget.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "határoló karakter";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "hamis";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Igaz, vagy Hamis érték";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "igaz";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://hu.wikipedia.org/wiki/Egyenl%C5%91tlens%C3%A9g";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Igaz, ha a kifejezés két oldala egyenlő.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Igaz, ha a bal oldali kifejezés nagyobb, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Igaz, ha a bal oldali kifejezés nagyobb vagy egyenlő, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Igaz, ha a bal oldali kifejezés kisebb, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Igaz, ha a bal oldali kifejezés kisebb vagy egyenlő, mint a jobb oldali.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Igaz, ha a kifejezés két oldala nem egyenlő..";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "nem %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Igaz, ha a kifejezés hamis.  Hamis, ha a kifejezés igaz.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "null érték.";
Blockly.Msg.LOGIC_OPERATION_AND = "és";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "vagy";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Igaz, ha mindkét kifejezés igaz.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Igaz, ha bármelyik kifejezés igaz.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "teszt";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "érték, ha hamis:";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "érték, ha igaz:";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Kiértékeli a kifejezést.  Ha a kifejezés igaz visszatér az \"érték, ha igaz\" értékkel, különben az \"érték, ha hamis\" értékkel.";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://hu.wikipedia.org/wiki/Matematikai_m%C5%B1velet";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Két szám összege.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Két szám hányadosa.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Két szám különbsége.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Két szám szorzata.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Az első számnak a második számmal megyegyező hatványa.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://hu.wikipedia.org/wiki/JavaScript#Aritmetikai_oper.C3.A1torok";
Blockly.Msg.MATH_CHANGE_TITLE = "módosítsd %1 értékét, (növekmény)ː %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "A(z) \"%1\" változó értékének növelése.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://hu.wikipedia.org/wiki/Matematikai_konstans";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Ismert matematikai konstans: π (3.141…), e (2.718…), φ (1.618…), gyök(2) (1.414…), gyök(½) (0.707…), vagy ∞ (végtelen).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "korlátozd %1 -t %2 és %3 közé";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Egy változó értékének korlátozása a megadott zárt intervallumra.";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "osztható ezzel?:";
Blockly.Msg.MATH_IS_EVEN = "páros szám?";
Blockly.Msg.MATH_IS_NEGATIVE = "negatív szám?";
Blockly.Msg.MATH_IS_ODD = "páratlan szám?";
Blockly.Msg.MATH_IS_POSITIVE = "pozitív szám?";
Blockly.Msg.MATH_IS_PRIME = "prímszám?";
Blockly.Msg.MATH_IS_TOOLTIP = "Megadja a számról, hogy páros, páratlan, prím, egész, pozitív vagy negatív szám, illetve osztható-e a másodikkal.  Igaz, vagy Hamis értéket ad eredményül.";
Blockly.Msg.MATH_IS_WHOLE = "egész szám?";
Blockly.Msg.MATH_MODULO_HELPURL = "https://hu.wikipedia.org/wiki/Eg%C3%A9szr%C3%A9sz#Als.C3.B3_eg.C3.A9szr.C3.A9sz";
Blockly.Msg.MATH_MODULO_SYMBOL = "%";  // untranslated
Blockly.Msg.MATH_MODULO_TITLE = "maradék %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Az egész osztás maradékát adja eredméynül.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://hu.wikipedia.org/wiki/Sz%C3%A1m";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Egy szám.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "lista elemeinek átlaga";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "lista legnagyobb eleme";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "lista mediánja";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "lista legkisebb eleme";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "lista módusza";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "lista véletlen eleme";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "lista elemeinek szórása";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "lista elemeinek összege";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "A lista elemeinek átlagát adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "A lista legnagyobb elemét adja vissza.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "A lista elemeinek mediánját adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "A lista legkisebb elemét adja vissza.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "A lista elemeinek móduszát adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "A lista egy véletlen elemét adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "A lista elemeinek szórását adja eredményül.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "A lista elemeinek összegét adja eredményül.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://hu.wikipedia.org/wiki/V%C3%A9letlen";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "véletlen tört";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Véletlen tört érték 0.0 és 1.0 között.";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://hu.wikipedia.org/wiki/V%C3%A9letlen";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "véletlen egész szám %1 között %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Véletlen egész szám a megadott zárt intervallumon belül.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://hu.wikipedia.org/wiki/Eg%C3%A9szr%C3%A9sz#Kerek.C3.ADt.C3.A9s";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "Kerekítés";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "Lekerekítés";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "Felkerekítés";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Kerekítés a következő, vagy megelőző egész számra.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://hu.wikipedia.org/wiki/Gy%C3%B6kvon%C3%A1s";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "abszolútérték";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "négyzetgyök";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "A szám abszolútértéke.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Az e megadott számú hatványa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "A szám természetes alapú logaritmusa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "A szám 10-es alapú logaritmusa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "A szám -1 szerese.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "A 10 megadott számú hatványa.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "A szám négyzetgyöke.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://hu.wikipedia.org/wiki/Sz%C3%B6gf%C3%BCggv%C3%A9nyek";
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "A fokban megadott szög arkusz koszinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "A fokban megadott szög arkusz szinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "A fokban megadott szög arkusz tangens értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "A fokban megadott szög koszinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "A fokban megadott szög szinusz értéke.";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "A fokban megadott szög tangens értéke.";
Blockly.Msg.ME = "Én";
Blockly.Msg.NEW_VARIABLE = "Új változó...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Az új változó neve:";
Blockly.Msg.OLED_CLEAR = "Clear";  // untranslated
Blockly.Msg.OLED_DRAW_IMAGE = "Draw Image";  // untranslated
Blockly.Msg.OLED_HELPURL = "";  // untranslated
Blockly.Msg.OLED_IMAGE_KIDSPEAK = "Kidspeak";  // untranslated
Blockly.Msg.OLED_IMAGE_TRETTON37 = "tretton37";  // untranslated
Blockly.Msg.OLED_INVERT = "Invert";  // untranslated
Blockly.Msg.OLED_PRINT = "Print";  // untranslated
Blockly.Msg.OLED_PRINT_HEIGHT = "Height";  // untranslated
Blockly.Msg.OLED_PRINT_IMAGE = "Image";  // untranslated
Blockly.Msg.OLED_PRINT_TEXT = "Text";  // untranslated
Blockly.Msg.OLED_PRINT_WIDTH = "Width";  // untranslated
Blockly.Msg.OLED_PRINT_X = "X";  // untranslated
Blockly.Msg.OLED_PRINT_Y = "Y";  // untranslated
Blockly.Msg.OLED_UPDATE = "Update";  // untranslated
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = ".";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "utasítások engedélyezése";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "paraméterlistaː";
Blockly.Msg.PROCEDURES_CALLNORETURN_CALL = "";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://hu.wikipedia.org/wiki/F%C3%BCggv%C3%A9ny_(programoz%C3%A1s)";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Végrehajtja az eljárást.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://hu.wikipedia.org/wiki/F%C3%BCggv%C3%A9ny_(programoz%C3%A1s)";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Meghívja a függvényt.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "paraméterlistaː";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create \"do %1\"";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "név";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "Eljárás";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Eljárás (nem ad vissza eredményt).";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "eredménye";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Függvény eredménnyel.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Figyelem: Az eljárásban azonos elnevezésű paramétert adtál meg.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Függvénydefiníció kiemelése";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Ha az érték igaz, akkor visszatér a függvény értékével.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Figyelem: Ez a blokk csak függvénydefiníción belül használható.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "változó:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Bemenet hozzáadása a függvényhez.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "paraméterek";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Bemenetek hozzáadása, eltávolítása vagy átrendezése ehhez a függvényhez.";
Blockly.Msg.REMOVE_COMMENT = "Megjegyzés törlése";
Blockly.Msg.RENAME_VARIABLE = "Változó átnevezése...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Minden \"%1\" változó átnevezése erre:";
Blockly.Msg.RGBLED_BEGIN_HELPURL = "";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_TARGET = "Target";  // untranslated
Blockly.Msg.RGBLED_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
Blockly.Msg.RGBLED_SIDES_LEFT = "Left";  // untranslated
Blockly.Msg.RGBLED_SIDES_RIGHT = "Right";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_APPENDTEXT = "Serial Available";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_HELPURL = "http://www.arduino.cc/en/Serial/available";  // untranslated
Blockly.Msg.SERIAL_AVAILABLE_TOOLTIP = "Get the number of bytes (characters) available for reading from the serial port.";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER = "Byte Code of Number";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT1 = "Byte code of";  // untranslated
Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT2 = "";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_APPENDTEXT = "Serial Println";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_HELPURL = "http://www.arduino.cc/en/Serial/Println";  // untranslated
Blockly.Msg.SERIAL_PRINTLN_TOOLTIP = "Prints data to the serial port as human-readable ASCII text followed by a carriage return character and a newline characte.";  // untranslated
Blockly.Msg.SERIAL_PRINT_APPENDTEXT = "Serial Print";  // untranslated
Blockly.Msg.SERIAL_PRINT_HELPURL = "http://www.arduino.cc/en/Serial/Print";  // untranslated
Blockly.Msg.SERIAL_PRINT_TOOLTIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
Blockly.Msg.SERIAL_READ_APPENDTEXT = "Serial Read";  // untranslated
Blockly.Msg.SERIAL_READ_HELPURL = "http://www.arduino.cc/en/Serial/Read";  // untranslated
Blockly.Msg.SERIAL_READ_TOOLTIP = "the first byte of incoming serial data available (or -1 if no data is available).";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "szövegéhez fűzd hozzá";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "A";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Szöveget fűz a \"%1\" változó értékéhez.";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "kisbetűs";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "Címként Formázott";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "NAGYBETŰS";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "első betű";
Blockly.Msg.TEXT_CHARAT_FROM_END = "hátulról #. betű";
Blockly.Msg.TEXT_CHARAT_FROM_START = "#. betű";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "A";
Blockly.Msg.TEXT_CHARAT_LAST = "utolsó betű";
Blockly.Msg.TEXT_CHARAT_RANDOM = "véletlen betű";
Blockly.Msg.TEXT_CHARAT_TAIL = "karaktere";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "A szöveg egy megadott karakterét adja eredményül.";
Blockly.Msg.TEXT_COMMENTOUT_APPENDTEXT = "CommentOut";  // untranslated
Blockly.Msg.TEXT_COMMENTOUT_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_COMMENTOUT_TOOLTIP = "";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Elem hozzáfűzése a szöveghez.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "összefűz";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Összefűzéssel, törléssel vagy rendezéssel kapcsolato sblokkok szöveg szerkesztéséhez.";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "betűtől a hátulról számított";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "betűtől a(z)";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "betűtől az utolsó";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "a";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "szövegben válaszd ki az első";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "szövegben válaszd ki a hátulról a(z)";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "szövegben válaszd ki a(z)";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "betűig tartó betűsort";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "A megadott szövegrészletet adja eredményül.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "A(z)";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "szövegben a részlet első előfordulásának helye";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "szövegben a részlet utolsó előfordulásának helye";
Blockly.Msg.TEXT_INDEXOF_TAIL = "szövegnek";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "A keresett szöveg első vagy utolsó előfordulásával tér vissza.  0 esetén a szövegrészlet nem található.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 üres sztring?";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Igaz, ha a vizsgált szöveg hossza 0.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "összefűz";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Tetszőleges számú szövegrészletet fűz össze egybefüggő szöveggé.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "%1 hossza";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "A megadott szöveg karaktereinek számát adja eredményül (beleértve a szóközöket).";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "Üzenet %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Megejelníti a megadott kaakterláncot üzenetként a képernyőn.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Számot kér be a felhasználótól.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Szöveget kér be a felhasználótól.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "Kérj be számot";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "Kérj be szöveget";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://hu.wikipedia.org/wiki/String";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Egy betű, szó vagy szöveg egy sora.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "szóközök levágása mindkét végéről";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "szóközök levágása az elejéről";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "szóközök levágása a végéről";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Levágja a megadott szöveg végeiről a szóközöket.";
Blockly.Msg.TODAY = "Ma";
Blockly.Msg.TUNES_HELPURL = "";  // untranslated
Blockly.Msg.TUNES_PLAY = "Play tune";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "változó";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Készíts \"beállít %1\"";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TAIL = "";  // untranslated
Blockly.Msg.VARIABLES_GET_TITLE = "";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "A változó értékét adja eredményül.";
Blockly.Msg.VARIABLES_SET = "állítsd be %1 erre %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Készíts \"kér %1\"";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TAIL = "to";  // untranslated
Blockly.Msg.VARIABLES_SET_TITLE = "set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "A változónak adhatunk értéket.";
Blockly.Msg.VARIABLES_TYPE_ANY = "Any";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ARRAY = "Array int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_ARRAY2D = "Array2D int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_BOOLEAN = "boolean";  // untranslated
Blockly.Msg.VARIABLES_TYPE_BYTE = "byte";  // untranslated
Blockly.Msg.VARIABLES_TYPE_CHAR = "char";  // untranslated
Blockly.Msg.VARIABLES_TYPE_COLOUR = "Colour";  // untranslated
Blockly.Msg.VARIABLES_TYPE_DOUBLE = "double";  // untranslated
Blockly.Msg.VARIABLES_TYPE_FLOAT = "float";  // untranslated
Blockly.Msg.VARIABLES_TYPE_LONG = "long";  // untranslated
Blockly.Msg.VARIABLES_TYPE_NUMBER = "int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_STRING = "String";  // untranslated
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_INT = "unsigned int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_UNSIGNED_LONG = "unsigned long";  // untranslated
Blockly.Msg.VARIABLES_TYPE_VOLATILE_INT = "volatile int";  // untranslated
Blockly.Msg.VARIABLES_TYPE_WORD = "word";  // untranslated
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_CALLRETURN_CALL = Blockly.Msg.PROCEDURES_CALLNORETURN_CALL;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;